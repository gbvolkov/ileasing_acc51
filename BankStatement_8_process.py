from datetime import datetime
from io import TextIOWrapper
import pandas as pd
from const import COLUMNS


# датаопер|ко|номердокум|датадокум|дебет|кредит|рублевоепокрытие|контрагентинн|контрагенткпп|контрагентнаименование|контрагентсчет|контрагентбик|контрагенткоррсчет|контрагентбанк|клиентинн|клиентнаименование|клиентсчет|клиенткпп|клиентбин|клиенткоррсчет|клиентбанк|код|назначениеплатежа|очерплатежа|бюджетныйплатежстатуссост|бюджетныйплатежкбк|бюджетныйплатежоктмо|бюджетныйплатежоснование|бюджетныйплатежналогпериод|бюджетныйплатежномердок|idопер
# датаопер|ко|номердокум|датадокум|дебет|кредит|рублевоепокрытие|контрагентинн|контрагенткпп|контрагентнаименование|контрагентсчет|контрагентбик|контрагенткоррсчет|контрагентбанк|клиентинн|клиентнаименование|клиентсчет|клиенткпп|клиентбин|клиенткоррсчет|клиентбанк|назначениеплатежа|очерплатежа|idопер
# датаопер|ко|номердокум|датадокум|дебет|кредит|рублевоепокрытие|контрагентинн|контрагенткпп|контрагентнаименование|контрагентсчет|контрагентбик|контрагенткоррсчет|контрагентбанк|клиентинн|клиентнаименование|клиентсчет|клиенткпп|клиентбик|клиенткоррсчет|клиентбанк|резполе|код|кодвыплат|назначениеплатежа|очерплатежа|видусловияоплаты|основаниедлясписания|бюджетныйплатежстатуссост|бюджетныйплатежкбк|бюджетныйплатежоктмо|бюджетныйплатежоснование|бюджетныйплатежналогпериод|бюджетныйплатежномердок|бюджетныйплатеждатадок|idопер
# датаопер|ко|номердокум|датадокум|дебет|кредит|рублевоепокрытие|контрагентинн|контрагенткпп|контрагентнаименование|контрагентсчет|контрагентбик|контрагенткоррсчет|контрагентбанк|клиентинн|клиентнаименование|клиентсчет|клиенткпп|клиентбик|клиенткоррсчет|клиентбанк|резполе|код|кодвыплат|назначениеплатежа|очерплатежа|видусловияоплаты|основаниедлясписания|бюджетныйплатежстатуссост|бюджетныйплатежкбк|бюджетныйплатежоктмо|бюджетныйплатежоснование|бюджетныйплатежналогпериод|бюджетныйплатежномердок|бюджетныйплатеждатадок|idопер|idдокум
# датаопер|ко|номердокум|датадокум|дебет|кредит|рублевоепокрытие|контрагентинн|контрагенткпп|контрагентнаименование|контрагентсчет|контрагентбик|контрагенткоррсчет|контрагентбанк|клиентинн|клиентнаименование|клиентсчет|клиенткпп|клиентбик|клиенткоррсчет|клиентбанк|резполе|код|кодвыплат|назначениеплатежа|очерплатежа|видусловияоплаты|бюджетныйплатежстатуссост|бюджетныйплатежкбк|бюджетныйплатежоктмо|бюджетныйплатежоснование|бюджетныйплатежналогпериод|бюджетныйплатежномердок|бюджетныйплатеждатадок|idопер|idдокум
# COLUMNS = ["clientID", "clientBIC", "clientBank", "clientAcc", "clientName", "stmtDate", "stmtFrom", "stmtTo", "openBalance", "totalDebet", "totalCredit", "closingBalance",
#           "entryDate", "cpBIC", "cpBank", "cpAcc", "cpTaxCode", "cpName", "Debet", "Credit", "Comment",
#           "filename"]
def BankStatement_8_process(
    header: pd.DataFrame,
    data: pd.DataFrame,
    footer: pd.DataFrame,
    inname: str,
    clientid: str,
    params: dict,
    sheet: str,
    logf: TextIOWrapper,
) -> pd.DataFrame:
    df = pd.DataFrame(columns=COLUMNS)

    df["entryDate"] = data["датадокум"]
    df["cpBIC"] = data["контрагентбик"]
    df["cpBank"] = data["контрагентбанк"]
    df["cpAcc"] = data["контрагентсчет"]
    df["cpTaxCode"] = data["контрагентинн"]
    df["cpName"] = data["контрагентнаименование"]
    df["Debet"] = data["дебет"]
    df["Credit"] = data["кредит"]
    df["Comment"] = data["назначениеплатежа"]

    # header: За период,c 22.06.2020 по 22.06.2021,,,,
    df["clientName"] = data["клиентнаименование"]
    df["clientBIC"] = data["клиентбик"]
    df["clientBank"] = data["клиентбанк"]
    df["clientAcc"] = data["клиентсчет"]
    df["clientTaxCode"] = data["клиентинн"]

    if len(header.axes[0]) >= 1:
        set_header_fields(header, df)

    if footer.axes[0].size > 2:
        set_footer_fields(footer, df)

    return df

def set_footer_fields(footer, df):
    turnovers = footer.iloc[2]
    if turnovers.size > 1:
        df["totalDebet"] = turnovers.iloc[1]
    if turnovers.size > 2:
        df["totalCredit"] = turnovers.iloc[2]
    if turnovers.size > 3:
        df["closingBalance"] = turnovers.iloc[3]

def set_header_fields(header, df):
    obalance = header[header.iloc[:, 0] == "Входящий остаток"].dropna(
            axis=1, how="all"
        )
    if obalance.size > 2:
        df["openBalance"] = obalance.iloc[:, 2].values[0]
